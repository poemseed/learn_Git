1. 명령어
	- git log -p 				: 로그에서 출력되는 버전 간의 차이점을 출력하고 싶을때

** 한번에 파일이동하기 :	폴더에서 복사한후 경로 모양을 문법에 맞게 변경하여 cd /c/learn_SJ/git_test 창에 마우스 오른쪽으로 붙여넣기  

	- git log id값				: id 값 이후의 log 이전의 log만 보여진다
	- git diff id값..id값 			: 두 id값의 차이점을 파악
	- git diff				: 방금 수정된 기능에 대해서 어떤 작업을 햇는지 확인 할 수 있다.
	- git commit -am 'msg내용'	: add와 commit 한꺼번에 

2. branch
	- 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 브랜치이다.

** 브랜치란? https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%9E%80-%EB%AC
		%B4%EC%97%87%EC%9D%B8%EA%B0%80
		
		https://backlog.com/git-tutorial/kr/intro/intro1_1.html -> 발전편

	- git branch							: branch 리스트를 보여준다. 
	- git branch 브랜치이름					: 새로운 branch 만들기
	- git checkout 브랜치이름					: 브랜치이름으로 대상 변경
	- git log --branches --decorate				: 저장되어 있는 모든 branch의 log가 보여지게 된다.
	- git log --branches --decorate --graph			: 앞에 그래프 추가
	- git log --branches --decorate --graph --oneline	: 로그 내용을 한줄로 보기 편하게 나열
	- git log master..newb					: master에는 없고 newb에는 있는 것이 조회된다.
	- git log -p newb..master					: newb에는 없고 master에는 있는 것이 상세히 조회된다.

3. merge : branch 병합
	-  git merge newb		: newb를 master로 merge한다.

4. gitHub
	- 1. 나의 소스코드를 백업
	- 2. 다른 사람과의 협업 가능
	- git clone 복사한주소 저장하고싶은디렉토리	: 디렉토리에 소스코드 복사 
	- git log --reverse					: log를 거꾸로 보기

	